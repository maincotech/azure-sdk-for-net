// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DesktopVirtualization.Models;

namespace Azure.ResourceManager.DesktopVirtualization
{
    /// <summary> The UserSessions service client. </summary>
    public partial class UserSessionsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal UserSessionsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of UserSessionsOperations for mocking. </summary>
        protected UserSessionsOperations()
        {
        }
        /// <summary> Initializes a new instance of UserSessionsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal UserSessionsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2019-12-10-preview")
        {
            RestClient = new UserSessionsRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get a userSession. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UserSession>> GetAsync(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, hostPoolName, sessionHostName, userSessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a userSession. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UserSession> Get(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, hostPoolName, sessionHostName, userSessionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a userSession. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="force"> Force flag to login off userSession. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(resourceGroupName, hostPoolName, sessionHostName, userSessionId, force, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a userSession. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="force"> Force flag to login off userSession. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(resourceGroupName, hostPoolName, sessionHostName, userSessionId, force, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disconnect a userSession. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DisconnectAsync(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.Disconnect");
            scope.Start();
            try
            {
                return await RestClient.DisconnectAsync(resourceGroupName, hostPoolName, sessionHostName, userSessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disconnect a userSession. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Disconnect(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.Disconnect");
            scope.Start();
            try
            {
                return RestClient.Disconnect(resourceGroupName, hostPoolName, sessionHostName, userSessionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a message to a user. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="sendMessage"> Object containing message includes title and message body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendMessageAsync(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, SendMessage sendMessage = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.SendMessage");
            scope.Start();
            try
            {
                return await RestClient.SendMessageAsync(resourceGroupName, hostPoolName, sessionHostName, userSessionId, sendMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a message to a user. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="sendMessage"> Object containing message includes title and message body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendMessage(string resourceGroupName, string hostPoolName, string sessionHostName, string userSessionId, SendMessage sendMessage = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.SendMessage");
            scope.Start();
            try
            {
                return RestClient.SendMessage(resourceGroupName, hostPoolName, sessionHostName, userSessionId, sendMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List userSessions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="filter"> OData filter expression. Valid properties for filtering are userprincipalname and sessionstate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="hostPoolName"/> is null. </exception>
        public virtual AsyncPageable<UserSession> ListByHostPoolAsync(string resourceGroupName, string hostPoolName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (hostPoolName == null)
            {
                throw new ArgumentNullException(nameof(hostPoolName));
            }

            async Task<Page<UserSession>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.ListByHostPool");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByHostPoolAsync(resourceGroupName, hostPoolName, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UserSession>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.ListByHostPool");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByHostPoolNextPageAsync(nextLink, resourceGroupName, hostPoolName, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List userSessions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="filter"> OData filter expression. Valid properties for filtering are userprincipalname and sessionstate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="hostPoolName"/> is null. </exception>
        public virtual Pageable<UserSession> ListByHostPool(string resourceGroupName, string hostPoolName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (hostPoolName == null)
            {
                throw new ArgumentNullException(nameof(hostPoolName));
            }

            Page<UserSession> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.ListByHostPool");
                scope.Start();
                try
                {
                    var response = RestClient.ListByHostPool(resourceGroupName, hostPoolName, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UserSession> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.ListByHostPool");
                scope.Start();
                try
                {
                    var response = RestClient.ListByHostPoolNextPage(nextLink, resourceGroupName, hostPoolName, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List userSessions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="hostPoolName"/>, or <paramref name="sessionHostName"/> is null. </exception>
        public virtual AsyncPageable<UserSession> ListAsync(string resourceGroupName, string hostPoolName, string sessionHostName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (hostPoolName == null)
            {
                throw new ArgumentNullException(nameof(hostPoolName));
            }
            if (sessionHostName == null)
            {
                throw new ArgumentNullException(nameof(sessionHostName));
            }

            async Task<Page<UserSession>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(resourceGroupName, hostPoolName, sessionHostName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UserSession>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, resourceGroupName, hostPoolName, sessionHostName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List userSessions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="sessionHostName"> The name of the session host within the specified host pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="hostPoolName"/>, or <paramref name="sessionHostName"/> is null. </exception>
        public virtual Pageable<UserSession> List(string resourceGroupName, string hostPoolName, string sessionHostName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (hostPoolName == null)
            {
                throw new ArgumentNullException(nameof(hostPoolName));
            }
            if (sessionHostName == null)
            {
                throw new ArgumentNullException(nameof(sessionHostName));
            }

            Page<UserSession> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(resourceGroupName, hostPoolName, sessionHostName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UserSession> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("UserSessionsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, resourceGroupName, hostPoolName, sessionHostName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
