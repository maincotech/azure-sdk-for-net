// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Represents a SessionHost definition. </summary>
    public partial class SessionHost : Resource
    {
        /// <summary> Initializes a new instance of SessionHost. </summary>
        public SessionHost()
        {
        }

        /// <summary> Initializes a new instance of SessionHost. </summary>
        /// <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </param>
        /// <param name="lastHeartBeat"> Last heart beat from SessionHost. </param>
        /// <param name="sessions"> Number of sessions on SessionHost. </param>
        /// <param name="agentVersion"> Version of agent on SessionHost. </param>
        /// <param name="allowNewSession"> Allow a new session. </param>
        /// <param name="virtualMachineId"> Virtual Machine Id of SessionHost&apos;s underlying virtual machine. </param>
        /// <param name="resourceId"> Resource Id of SessionHost&apos;s underlying virtual machine. </param>
        /// <param name="assignedUser"> User assigned to SessionHost. </param>
        /// <param name="status"> Status for a SessionHost. </param>
        /// <param name="statusTimestamp"> The timestamp of the status. </param>
        /// <param name="osVersion"> The version of the OS on the session host. </param>
        /// <param name="sxSStackVersion"> The version of the side by side stack on the session host. </param>
        /// <param name="updateState"> Update state of a SessionHost. </param>
        /// <param name="lastUpdateTime"> The timestamp of the last update. </param>
        /// <param name="updateErrorMessage"> The error message. </param>
        internal SessionHost(string id, string name, string type, DateTimeOffset? lastHeartBeat, int? sessions, string agentVersion, bool? allowNewSession, string virtualMachineId, string resourceId, string assignedUser, Status? status, DateTimeOffset? statusTimestamp, string osVersion, string sxSStackVersion, UpdateState? updateState, DateTimeOffset? lastUpdateTime, string updateErrorMessage) : base(id, name, type)
        {
            LastHeartBeat = lastHeartBeat;
            Sessions = sessions;
            AgentVersion = agentVersion;
            AllowNewSession = allowNewSession;
            VirtualMachineId = virtualMachineId;
            ResourceId = resourceId;
            AssignedUser = assignedUser;
            Status = status;
            StatusTimestamp = statusTimestamp;
            OsVersion = osVersion;
            SxSStackVersion = sxSStackVersion;
            UpdateState = updateState;
            LastUpdateTime = lastUpdateTime;
            UpdateErrorMessage = updateErrorMessage;
        }

        /// <summary> Last heart beat from SessionHost. </summary>
        public DateTimeOffset? LastHeartBeat { get; set; }
        /// <summary> Number of sessions on SessionHost. </summary>
        public int? Sessions { get; set; }
        /// <summary> Version of agent on SessionHost. </summary>
        public string AgentVersion { get; set; }
        /// <summary> Allow a new session. </summary>
        public bool? AllowNewSession { get; set; }
        /// <summary> Virtual Machine Id of SessionHost&apos;s underlying virtual machine. </summary>
        public string VirtualMachineId { get; }
        /// <summary> Resource Id of SessionHost&apos;s underlying virtual machine. </summary>
        public string ResourceId { get; }
        /// <summary> User assigned to SessionHost. </summary>
        public string AssignedUser { get; set; }
        /// <summary> Status for a SessionHost. </summary>
        public Status? Status { get; set; }
        /// <summary> The timestamp of the status. </summary>
        public DateTimeOffset? StatusTimestamp { get; }
        /// <summary> The version of the OS on the session host. </summary>
        public string OsVersion { get; set; }
        /// <summary> The version of the side by side stack on the session host. </summary>
        public string SxSStackVersion { get; set; }
        /// <summary> Update state of a SessionHost. </summary>
        public UpdateState? UpdateState { get; set; }
        /// <summary> The timestamp of the last update. </summary>
        public DateTimeOffset? LastUpdateTime { get; }
        /// <summary> The error message. </summary>
        public string UpdateErrorMessage { get; set; }
    }
}
