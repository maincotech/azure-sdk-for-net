// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Status for a SessionHost. </summary>
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AvailableValue = "Available";
        private const string UnavailableValue = "Unavailable";
        private const string ShutdownValue = "Shutdown";
        private const string DisconnectedValue = "Disconnected";
        private const string UpgradingValue = "Upgrading";
        private const string UpgradeFailedValue = "UpgradeFailed";

        /// <summary> Available. </summary>
        public static Status Available { get; } = new Status(AvailableValue);
        /// <summary> Unavailable. </summary>
        public static Status Unavailable { get; } = new Status(UnavailableValue);
        /// <summary> Shutdown. </summary>
        public static Status Shutdown { get; } = new Status(ShutdownValue);
        /// <summary> Disconnected. </summary>
        public static Status Disconnected { get; } = new Status(DisconnectedValue);
        /// <summary> Upgrading. </summary>
        public static Status Upgrading { get; } = new Status(UpgradingValue);
        /// <summary> UpgradeFailed. </summary>
        public static Status UpgradeFailed { get; } = new Status(UpgradeFailedValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
