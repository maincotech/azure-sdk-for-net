// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DesktopVirtualization.Models;

namespace Azure.ResourceManager.DesktopVirtualization
{
    /// <summary> The Desktops service client. </summary>
    public partial class DesktopsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DesktopsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of DesktopsOperations for mocking. </summary>
        protected DesktopsOperations()
        {
        }
        /// <summary> Initializes a new instance of DesktopsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal DesktopsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2019-12-10-preview")
        {
            RestClient = new DesktopsRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get a desktop. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="desktopName"> The name of the desktop within the specified desktop group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Desktop>> GetAsync(string resourceGroupName, string applicationGroupName, string desktopName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DesktopsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, applicationGroupName, desktopName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a desktop. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="desktopName"> The name of the desktop within the specified desktop group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Desktop> Get(string resourceGroupName, string applicationGroupName, string desktopName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DesktopsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, applicationGroupName, desktopName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a desktop. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="desktopName"> The name of the desktop within the specified desktop group. </param>
        /// <param name="desktop"> Object containing Desktop definitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Desktop>> UpdateAsync(string resourceGroupName, string applicationGroupName, string desktopName, DesktopPatch desktop = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DesktopsOperations.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(resourceGroupName, applicationGroupName, desktopName, desktop, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a desktop. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="desktopName"> The name of the desktop within the specified desktop group. </param>
        /// <param name="desktop"> Object containing Desktop definitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Desktop> Update(string resourceGroupName, string applicationGroupName, string desktopName, DesktopPatch desktop = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DesktopsOperations.Update");
            scope.Start();
            try
            {
                return RestClient.Update(resourceGroupName, applicationGroupName, desktopName, desktop, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List desktops. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DesktopList>> ListAsync(string resourceGroupName, string applicationGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DesktopsOperations.List");
            scope.Start();
            try
            {
                return await RestClient.ListAsync(resourceGroupName, applicationGroupName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List desktops. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DesktopList> List(string resourceGroupName, string applicationGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DesktopsOperations.List");
            scope.Start();
            try
            {
                return RestClient.List(resourceGroupName, applicationGroupName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
